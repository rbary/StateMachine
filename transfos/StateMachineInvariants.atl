module StateMachineInvariants;
create result: SMTarget from model: SMSource;

-- ******************************---
-- HELPERS IMPL OCL CONSTRAINTS	 ---
-- ******************************---

-- For each model, there is a unicity of a StateMachine instanciation being ---
-- the starting to the creation and optimization of all the states and transitions of the
		-- model --
helper context SMSource!StateMachine def: stateMachineUnicity(): Boolean =
	SMSource!StateMachine.allInstances() -> select(s | s.
			oclIsTypeOf(SMSource!StateMachine)) -> size() = 1;

-- The state referenced by an initial state of a composite is a state of the composite --
helper context SMSource!CompositeState def: initStateBelong(): Boolean =
	--self.states -> includes(self.initialState);
	-- to update
	true;

-- Wether a StateMachine is active then it contains a only one active state and if --
-- this state is Composite it contains a only one active state and so on           --
helper context SMSource!StateMachine def: activeStateRecursion(): Boolean =
	-- self.isActive self.activeSubTree(); 
	-- to update 
	true;

helper context SMSource!CompositeState def: activeSubTree(): Boolean =
	self.states -> select(s | s.isActive) -> size() = 1 and 
	self.states -> select(s | s.oclIsTypeOf(SMSource!CompositeState)) -> forAll(s | if s.isActive then
			s.activeSubTree()
		else
			s.unactiveSubTree()
		endif);

helper context SMSource!CompositeState def: unactiveSubTree(): Boolean =
	self.states -> forAll(s | not s.isActive) and self.states -> select(s | s.
			oclIsTypeOf(SMSource!CompositeState)) -> forAll(s | s.unactiveSub);

-- There are no two states having the same name within a composite --
helper context SMSource!CompositeState def: stateDiscreetName(): Boolean =
	self.states -> forAll(s0 | self.states -> forAll(s1 | s0.name = s1.name implies s0 = s1));


---------- STATEMACHINE ----------
rule duplicateStateMachine {
	from
		sourceStateMachine: SMSource!StateMachine ( 
			sourceStateMachine.stateMachineUnicity()
			and 
			sourceStateMachine.activeStateRecursion()	    
		)
	to
		targetStateMachine: SMTarget!StateMachine (
			name <- sourceStateMachine.name,
			container <- sourceStateMachine.container,
			isActive <- sourceStateMachine.isActive,
			operation <- sourceStateMachine.operation,
			states <- sourceStateMachine.states,
			initialState <- sourceStateMachine.initialState,
			transitions <- sourceStateMachine.transitions,
			events <- sourceStateMachine.events,
			variables <- sourceStateMachine.variables
		)
	do{
		sourceStateMachine.stateMachineUnicity().debug('*** state machine unicity ***');
		sourceStateMachine.activeStateRecursion().debug('*** active state Recursion ***');
	}
}

---------- STATE ----------
rule duplicateState {
	from
		sourceState: SMSource!State (
			sourceState.oclIsTypeOf(SMSource!State)
		)
	to
		targetState: SMTarget!State (
			name <- sourceState.name,
			container <- sourceState.container,
			isActive <- sourceState.isActive,
			operation <- sourceState.operation
		)
}

---------- COMPOSITESTATE ----------
rule duplicateCompositeState {
	from
		sourceCompositeState: SMSource!CompositeState (
			sourceCompositeState.oclIsTypeOf(SMSource!CompositeState) 
			and 
			sourceCompositeState.initStateBelong()		
			and 
			sourceCompositeState.stateDiscreetName()
			
		)
	to
		targetCompositeState: SMTarget!CompositeState (
			name <- sourceCompositeState.name,
			container <- sourceCompositeState.container,
			isActive <- sourceCompositeState.isActive,
			operation <- sourceCompositeState.operation,
			states <- sourceCompositeState.states,
			initialState <- sourceCompositeState.initialState
		)
	do{
		sourceCompositeState.initStateBelong().debug('*** Init state belong ***');
		sourceCompositeState.stateDiscreetName().debug('*** State discreet name ***');
	}
}

---------- INITIALSTATE ----------
rule duplicateInitialState {
	from
		sourceInitialState: SMSource!InitialState
	to
		targetInitialState: SMTarget!InitialState (
			referencedState <- sourceInitialState.referencedState
		)
}

---------- TRANSITION ----------
rule duplicateTransition {
	from
		sourceTransition: SMSource!Transition
	to
		targetTransition: SMTarget!Transition (
			source <- sourceTransition.source,
			target <- sourceTransition.target,
			event <- sourceTransition.event,
			guard <- sourceTransition.guard
		)
}

---------- EVENT ----------
rule duplicateEvent {
	from
		sourceEvent: SMSource!Event
	to
		targetEvent: SMTarget!Event (
			name <- sourceEvent.name
		)
}

---------- EXPRESSION ----------
rule duplicateExpression {
	from
		sourceExpression: SMSource!Expression
	to
		targetExpression: SMTarget!Expression (
			left <- sourceExpression.left,
			right <- sourceExpression.right,
			operator <- sourceExpression.operator,
			_name <- sourceExpression._name
		)
}

---------- BOOLEANDATA ----------
rule duplicateBooleanData {
	from
		sourceBooleanData: SMSource!BooleanData
	to
		targetBooleanData: SMTarget!BooleanData (
			value <- sourceBooleanData.value
		)
}

---------- INTEGERDATA ----------
rule duplicateIntegerData {
	from
		sourceIntegerData: SMSource!IntegerData
	to
		targetIntegerData: SMTarget!IntegerData (
			value <- sourceIntegerData.value
		)
}

---------- BOOLEANVARIABLE ----------
rule duplicateBooleanVariable {
	from
		sourceBooleanVariable: SMSource!BooleanVariable
	to
		targetBooleanVariable: SMTarget!BooleanVariable (
			value <- sourceBooleanVariable.value,
			name <- sourceBooleanVariable.name
		)
}

---------- INTEGERVARIABLE ----------
rule duplicateIntegerVariable {
	from
		sourceIntegerVariable: SMSource!IntegerVariable
	to
		targetIntegerVariable: SMTarget!IntegerVariable (
			value <- sourceIntegerVariable.value,
			name <- sourceIntegerVariable.name
		)
}

---------- OPERATION ----------
rule duplicateOperation {
	from
		sourceOperation: SMSource!Operation
	to
		targetOperation: SMTarget!Operation (
			contents <- sourceOperation.contents
		)
}

---------- ASSIGNMENT ----------
rule duplicateAssignment {
	from
		sourceAssignment: SMSource!Assignment
	to
		targetAssignment: SMTarget!Assignment (
			expression <- sourceAssignment.expression,
			variable <- sourceAssignment.variable,
			_name <- sourceAssignment._name
		)
}

---------- VARIABLEREFERENCE ----------
rule duplicateVariableReference {
	from
		sourceVariableReference: SMSource!VariableReference
	to
		targetVariableReference: SMTarget!VariableReference (
			variable <- sourceVariableReference.variable,
			_name <- sourceVariableReference._name
		)
}
